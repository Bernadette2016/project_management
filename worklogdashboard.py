# -*- coding: utf-8 -*-
"""worklogdashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bIhrVxyNZqbbv5Jp5Vj64X_FFp_2RZaC
"""

!pip install streamlit

!git clone https://github.com/Bernadette2016/project_management.git

# Commented out IPython magic to ensure Python compatibility.
# %cd project_management/

import os
import re
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

st.set_page_config(
    page_title="Worklog Tracker",
    page_icon="üìù",  # You can use an emoji or a local file like "favicon.png"
    layout="wide",  # Options: "wide" or "centered"
    initial_sidebar_state="expanded"  # Options: "auto", "expanded", "collapsed"
)

# Custom CSS for background image
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("https://unsplash.com/photos/shallow-focus-photography-of-computer-monitor-ymuAM4S2fxI");
    background-size: cover;
}
</style>
"""

st.markdown(page_bg_img, unsafe_allow_html=True)

st.title("Welcome to Your Worklog App")
st.write("Track your tasks, log hours, and analyze work trends easily!")

# List all filenames in your directory
file_names = ["WorkLog-export-1743799534-51e8e4143068b96803894c05ca16f93f.csv",
              "WorkLog-export-1743803562-7ad73b0a39f8fef8d1833de3dd471cee.csv",
              "WorkLog-export-1745955345-d9f9902b65ea9471787cb32422c7c087.csv",
              "WorkLog-export-1745957701-2e6df8a0f81cb1705727bb4e3813adde.csv",
              "WorkLog-export-1745957728-033ccfbde4514220201a163194a94c7e.csv",
              "WorkLog-export-1745957785-c87396d4325a3e8011592427e714453b.csv",
              "WorkLog-export-1745957824-1f5e527f5af448ae21986143d315353b.csv",
              "WorkLog-export-1745957857-d49662f3fe6cb0fe0b9c38e7cf4f05cc.csv",
              "WorkLog-export-1745958289-645b00c6bfaf295345adf4b7deaa242f.csv",
              "WorkLog-export-1745958720-725f77c29d4135bb9ea25bd87933a593.csv",
              "WorkLog-export-1745959686-29962ed776cf0fa82e8cb81f62707631.csv",
              "WorkLog-export-1745959756-dbbca352adcd8b06b17be4a483b757c3.csv",
              "WorkLog-export-1745960930-30af5c774815ac281787f0e89f1b5838.csv",
              "WorkLog-export-1745961098-4f7c09c412371417fffabf97fb6c4fe8.csv"]  # Add all file names

# Create a dictionary to store DataFrames
dfs = {}

# Loop through files and read each one into a DataFrame
for file in file_names:
    dfs[file] = pd.read_csv(file)

# Loop through files and read each one into a DataFrame
for file in file_names:
    try:
        df = pd.read_csv(file)
        # Extract numeric part from filename
        match = re.search(r"\d+", file)
        file_id = int(match.group()) if match else None
        # Add "FileID" column to DataFrame
        df["FileID"] = file_id
        dfs[file] = df
    except FileNotFoundError:
        st.error(f"Error: File not found - {file}")

# Concatenate all DataFrames into one
if dfs:
    combined_df = pd.concat(dfs.values(), ignore_index=True)
    combined_df["started_at"] = pd.to_datetime(combined_df["started_at"])
    combined_df["created_at"] = pd.to_datetime(combined_df["created_at"])
    combined_df["updated_at"] = pd.to_datetime(combined_df["updated_at"])
    combined_df["user_created_at"] = pd.to_datetime(combined_df["user_created_at"])
    combined_df["user_updated_at"] = pd.to_datetime(combined_df["user_updated_at"])
else:
    st.warning("No worklog files found.")
    st.stop()

st.set_page_config(
    page_title="Worklog Tracker",
    page_icon="üìù",  # You can use an emoji or a local file like "favicon.png"
    layout="wide",  # Options: "wide" or "centered"
    initial_sidebar_state="expanded"  # Options: "auto", "expanded", "collapsed"
)

st.title("Welcome to Your Worklog App")
st.write("Track your tasks, log hours, and analyze work trends easily!")

# --- Sidebar Filters ---
st.sidebar.header("Filter Your Worklogs")

# Date Range Filter
min_date = combined_df["started_at"].min().date()
max_date = combined_df["started_at"].max().date()
start_date = st.sidebar.date_input("Start Date", min_date)
end_date = st.sidebar.date_input("End Date", max_date)
filtered_df = combined_df[(combined_df["started_at"].dt.date >= start_date) & (combined_df["started_at"].dt.date <= end_date)].copy()

# Task Filter
unique_tasks = filtered_df["task"].unique()
selected_tasks = st.sidebar.multiselect("Tasks", unique_tasks)
if selected_tasks:
    filtered_df = filtered_df[filtered_df["task"].isin(selected_tasks)].copy()

# User Filter
unique_users = filtered_df["user_first_name"].unique()
selected_users = st.sidebar.multiselect("Users", unique_users)
if selected_users:
    filtered_df = filtered_df[filtered_df["user_first_name"].isin(selected_users)].copy()

# --- KPIs ---
st.sidebar.header("Key Performance Indicators")

total_logged_minutes = filtered_df["minutes"].sum()
total_logged_hours = round(total_logged_minutes / 60, 2)
num_unique_tasks = filtered_df["task"].nunique()
num_log_entries = filtered_df.shape[0]

st.sidebar.metric("Total Logged Hours", total_logged_hours)
st.sidebar.metric("Number of Log Entries", num_log_entries)
st.sidebar.metric("Unique Tasks Performed", num_unique_tasks)

# --- Tabbed Content ---
tab1, tab2, tab3, tab4 = st.tabs(["Raw Data", "Task Analysis", "User Analysis", "Detailed View"])

with tab1:
    st.subheader("Raw Worklog Data")
    st.dataframe(filtered_df)

with tab2:
    st.subheader("Task Analysis")

    # Time spent per task
    task_minutes = filtered_df.groupby("task")["minutes"].sum().sort_values(ascending=False)
    task_hours = round(task_minutes / 60, 2)
    st.subheader("Total Time Spent per Task (Hours)")
    st.bar_chart(task_hours)

    # Word Cloud of Task Descriptions
    text = " ".join(filtered_df["description"].astype(str))
    wordcloud = WordCloud(width=800, height=400, background_color="white").generate(text)
    st.subheader("Word Cloud of Task Descriptions")
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    st.pyplot()

with tab3:
    st.subheader("User Analysis")

    # Time spent per user
    user_minutes = filtered_df.groupby("user_first_name")["minutes"].sum().sort_values(ascending=False)
    user_hours = round(user_minutes / 60, 2)
    st.subheader("Total Time Spent per User (Hours)")
    st.bar_chart(user_hours)

    # Average feedback per user
    avg_feedback = filtered_df.groupby("user_first_name")["user_feedbacks_average"].mean().sort_values(ascending=False)
    st.subheader("Average User Feedback")
    st.bar_chart(avg_feedback)

with tab4:
    st.subheader("Detailed Worklog View")
    # You can add more detailed visualizations or tables here
    # For example, a table showing all entries with descriptions
    st.dataframe(filtered_df[["started_at", "user_first_name", "task", "minutes", "description"]])

